<?php
/**
 * Implements hook_menu().
 */
function edu_soho_menu() {
  $items = array();
  $items['create/class_record'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_ajax_create_class_record',
    'access callback' => TRUE,
  );
  $items['user/dashboard'] = array(
    'title' => t('Dashboard'),
    'access callback' => 'user_is_logged_in',
    'page callback' => 'page_edu_drashboard',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );
  return $items;
}
/**
 * Implements hook_admin_paths_alter().
 */
function edu_soho_admin_paths_alter(&$paths) {
  $paths['node/add/study-record'] = FALSE;
  $paths['node/add/order'] = FALSE;
}
/**
 * stu申请试听
 */
function _ajax_create_class_record(){
  header('Content-Type: application/json');
  if (empty($_POST['uid'])) {
    drupal_exit();
  }
  if(!empty($_POST['order_id'])){
    $type = 'study_record';
    $uid = $_POST['uid'];
    $order_id = $_POST['order_id'];
    
    //already has a unpushished class order'will not create!!!
    if(count(_edu_get_node($type,$uid,0))){
      $data = array('error'=>1);
      //'您已经申请过了，我们的老师会尽快与您联系！'
      print json_encode($data);
      drupal_exit();
    }
    //check userpoints drupal_goto('buy points');
    if(userpoints_get_current_points()<=0){      
      $data = array('error'=>2);
      //'您点卡不足，请充值后申请！！'
      print json_encode($data);
      drupal_exit();
    }
    //试听2个课时，只能创建2个节点！
    $order_node = node_load($order_id);
    $counts = count((array)_edu_get_og_content($order_id));
    if($counts >= $order_node->field_class_hour['und'][0]['value']){
      $data = array('error'=>3);
      //'该课程已结束！！'
      print json_encode($data);
      drupal_exit();
    }

    $node = new stdClass(); // We create a new node object
    $node->type = $type; // Or any other content type you want
    $account = user_load($uid);
    $node->title = $account->name." request a Class|申请试听";
    $node->status = 0;
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    node_object_prepare($node); // Set some default values.
    $node->uid = $uid;
    $node->field_student[$node->language][0]['uid'] = $uid;
    $node->field_teacher[$node->language][0]['uid'] = 4;//default teacher
    $node->og_group_ref[$node->language][0]['target_id'] = $order_id;
      // dpm($node);
    if($node = node_submit($node)) { // Prepare node for saving
        node_save($node);
        if($node->nid){
          $data = array(
            'nid' => $node->nid,
          );
        }else{
          $data = array(
            'nid' => 0,
          );
        }
    }

    print json_encode($data);
  }

  drupal_exit();
}
/**
 * Implements hook_init().
 */
function edu_soho_init() {
  global $user;
  drupal_add_js(array('currentUser' => $user->uid), 'setting');
  drupal_add_js(drupal_get_path('module', 'edu_soho').'/js/edu_soho.js');
  //uid = Drupal.settings.currentUser;
}
/**
 * $type string 
 * $account uid/obj
 */
function _edu_get_node($type,$uid=NULL,$status=1){
  if(!isset($uid)){
    global $user;
    $uid = $user->uid;
  }
  return db_select('node', 'n')
    ->fields('n',array('nid'))
    ->condition('type', $type)
    ->condition('status', $status)
    ->condition('uid',$uid)
    ->execute()
    ->fetchAll();
}
/**
 * 获取学生/老师的所有订单课程
 * field_student
 * field_teacher
 */
function edu_get_orders($account,$field='field_student'){
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'order')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition($field, 'uid', $account->uid)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $res = $query->execute();
  if(isset($res['node']))
    return $res['node'];
  // if($field=='field_agency') return views_get_view_result('nodes','page_agency_order');
  return array();
}
/**
 * 获取学生/老师的所有课程记录 study_record
 * field_student
 * field_teacher
 */
function edu_get_records($account,$field='field_student'){
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'study_record')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition($field, 'uid', $account->uid)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $res = $query->execute();
  if(isset($res['node']))
    return $res['node'];
  // if($field=='field_agency') return views_get_view_result('nodes','page_agency_record'); 
  return array();
}
//get all user or or all nodes!
//class=>0
function _edu_get_og_content($gid,$entity_type='node'){
  return db_select('og_membership', 'n')
    ->fields('n',array('etid'))
    ->condition('gid', $gid)
    ->condition('entity_type',$entity_type)
    ->execute()
    ->fetchAll();
}
/**
已经完成的课时，即flagged finished class record of one order！
**/
function edu_get_finished_class($order_id){
    $classes = _edu_get_og_content($order_id);
    $flag = flag_get_flag('mark_finished_class');//teacher
    $return = array();
    if ($flag) {
      foreach ($classes as $key => $node) {
        if($flag->is_flagged($node->etid)){
            $return[] = $node->etid;
        }
      }
    }
    return $return;
}
/**
 * Implements hook_node_view().
 */
function edu_soho_node_view($node, $view_mode, $langcode) {
  if($node->type == 'study_record' && $node->status==1 && $view_mode='full'){
    //teacher 决定是否可以进入房间！
    $flag = flag_get_flag('mark_finished_class');//
    if ($flag && $flag->is_flagged($node->nid)) {
      return;
    }
    // drupal_get_js(drupal_get_path('module', 'edu_soho').'/js/open_classroom.js','file');
    $node->content['#attached']['js'][] = drupal_get_path('module', 'edu_soho').'/js/open_classroom.js';
    $node->content ['appear'] = array(
      '#markup' => "<button id='open_classroom' class='btn btn-default btn-lg' data-room='https://appear.in/abc-chinaedu-".$node->nid."' >".t('Open ClassRoom').'</button>',
      '#weight' => 10,
      //window.open("https://appear.in/abc-china-edu-'.$node->nid.'","winname","directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=no,width=400,height=350");
      // '#theme' => 'mymodule_my_additional_field',//var iframe = document.getElementById(\'appear\');
  // iframe.src = iframe.src; <iframe id="appear" src="https://appear.in/abc-chinaedu-'.$node->nid.'" width="700" height="500" frameborder="0"></iframe>
    );
  }
}

/**
 * Implements hook_user_insert().
 * 当新student注册后，自动创建一个“试听”的订单。
 */
function edu_soho_user_insert(&$edit, $account, $category) {
  if(in_array('student', $account->roles)){
    $type = 'order';
    $node = new stdClass(); // We create a new node object
    $node->type = $type; // Or any other content type you want
    $node->title = "试听 | On trial | ".date('ymd');
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node); // Set some default values.
    $node->uid = 1; // Or any id you wish
    $node->field_student[$node->language][0]['uid'] = $account->uid;
    $node->field_class_hour[$node->language][0]['value'] = 1;//试听2课时
    $node->field_teacher[$node->language][0]['uid'] = 4;//default teacher
    $node->group_group[$node->language][0]['value'] = 1;
    //2015-08-29 00:00:00
    $node->field_due_date[$node->language][0]['value'] = date('Y-m-d H:i:s');
    $node->field_due_date[$node->language][0]['value2'] = date('Y-m-d H:i:s',time()+86400*31);
      // dpm($node);
    if($node = node_submit($node)) { // Prepare node for saving
      node_save($node);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function edu_soho_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if($op == 'view' && $type == 'study_record'){
    global $user;
    if(in_array('teacher', array_values($user->roles))){
      if($node->field_teacher[LANGUAGE_NONE][0]['uid'] != $user->uid)
        return NODE_ACCESS_DENY;
    }
    if(in_array('student', array_values($user->roles))){
      if($node->field_student[LANGUAGE_NONE][0]['uid'] != $user->uid)
        return NODE_ACCESS_DENY;
    }

  }
  if($op == 'view' && $type == 'order'){
    global $user;
    if(in_array('teacher', array_values($user->roles)) || in_array('student', array_values($user->roles))){
        return NODE_ACCESS_DENY;
    }

  }
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_alter().
 */
function edu_soho_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'study_record_node_form'){
    $form['og_group_ref']['#attributes']['class'][] = 'hide';
    $form['field_student']['#attributes']['class'][] = 'hide';
    $form['field_teacher']['#attributes']['class'][] = 'hide';
    if(isset($_GET['og_group_ref']))
      $form['og_group_ref']['und'][0]['default']['#default_value'] = $_GET['og_group_ref'];
    if(isset($_GET['student']))
    $form['field_student']['und'][0]['uid']['#default_value'] = $_GET['student'];
    if(isset($_GET['teacher']))
    $form['field_teacher']['und'][0]['uid']['#default_value'] = $_GET['teacher'];
    // dpm($form);
  }
}

function page_edu_drashboard() {
  return 'white page!';
}



/**
 * Implements hook_views_pre_execute().
 */

function edu_soho_views_post_execute(&$view) {
  if ($view->name == 'nodes' && ($view->current_display=='page_agency_record' || $view->current_display=='page_agency_order')) {
    // dpm($view);
    global $user;
    foreach ($view->result as $key => &$record) {
      $student_uid = $record->field_field_student[0]['raw']['uid'];
      if(!isset($students[$student_uid])){
        // dpm($student_uid);
        $students[$student_uid] = user_load($student_uid);
      }
      $student = $students[$student_uid];
      if(!isset($student->field_agency[LANGUAGE_NONE][0]['uid']) || $student->field_agency[LANGUAGE_NONE][0]['uid'] != $user->uid){
        unset($view->result[$key]);
        // dpm($key);
      }
    }
    // dpm($view->result);

    // for answers ,add wrapper for new ajax answer to fill
    // add js for comments delete use pop modal.
    //drupal_add_js(drupal_get_path('module', 'druedu_qa') .'/js/delete_popup_comments.js');
  }
}

/**
 * 获取代理的所有学生
 */
function edu_get_agencyusers($account){
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_agency', 'uid', $account->uid)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $res = $query->execute();
  if(isset($res['user']))
    return $res['user'];
  return array();
}


/**
 * Act on an object being flagged.
 *
 * @param $flag
 *  The flag object.
 * @param $entity_id
 *  The id of the entity the flag is on.
 * @param $account
 *  The user account performing the action.
 * @param $flagging_id
 *  The flagging entity.
 * 老师标记课时完成后，给代理加分+1
 */
function edu_soho_flag_flag($flag, $entity_id, $account, $flagging) {
  if($flag->name == 'mark_finished_class'){
    if(!in_array('teacher', array_values($user->roles))) return;
    $node = node_load($entity_id);
    $field_student = $node->field_student[LANGUAGE_NONE][0]['uid'];
    $account = user_load($field_student);
    if(isset($account->field_agency[LANGUAGE_NONE][0]['uid'])){
      $agency_uid = $account->field_agency[LANGUAGE_NONE][0]['uid'];
      $params = array(
        'uid' => $agency_uid,
        'points' => 1,
        'operation' => 'Insert',
        'description' => '学生完成课时'.$entity_id,
      );
      userpoints_userpointsapi($params);
    }
  }
}